substitutions:
  node_name: comfoair_q
  device_name: ComfoAir Q
  description: ComfoAir Q Controller
  developer: Svenar
  entity_prefix: ""

  filter_time: 5s
  filter_send_every: "1"
  filter_window_size: "3"

esp32:
  board: esp32dev
  framework:
    type: esp-idf

esphome:
  name: ${node_name}
  comment: ${device_name}
  friendly_name: "${device_name}"
  project:
    name: "${developer}.${description}"
    version: 1.1.3

external_components:
  - source:
      type: git
      url: https://github.com/svenar-iot/esphome-comfoair
    components: [comfoair_q]
  # - source: components
  #   components: [comfoair_q]

dashboard_import:
  package_import_url: github://svenar-iot/esphome-comfoair/comfoair_q.yaml@v1.1.3
  import_full_config: false # or true

wifi:
  ap:
    ssid: ${node_name}-setup
    password: ${node_name}setup

esp32_improv:
  authorizer: none

captive_portal:

# Disable uart logging
logger:
  baud_rate: 0

# Enable Home Assistant API
api:

ota:
  platform: esphome

web_server:
  version: 3

output:
  - platform: gpio
    id: orange_led_out
    pin: GPIO18
  - platform: gpio
    id: green_led_out
    pin: GPIO19
  - platform: template
    id: comfoair_fan_output
    type: float
    zero_means_zero: true
    write_action:
      - logger.log: "Fan Speed was changed!"

interval:
  - interval: 1s
    then:
      if:
        condition:
          wifi.connected:
        then:
          - output.turn_off: green_led_out
        else:
          - output.turn_on: green_led_out
          - delay: 500ms
          - output.turn_off: green_led_out
  - interval: 500ms
    then:
      if:
        condition:
          api.connected:
        then:
          - output.turn_off: orange_led_out
        else:
          - if:
              condition: wifi.connected
              then:
                - output.turn_on: orange_led_out
                - delay: 250ms
                - output.turn_off: orange_led_out
              else:
                - output.turn_off: orange_led_out

canbus:
  - platform: esp32_can
    tx_pin: GPIO17
    rx_pin: GPIO16
    bit_rate: 50kbps
    can_id: 0 # mandatory but we do not use it
    on_frame:
      - can_id: 0
        can_id_mask: 0
        use_extended_id: true
        then:
          - lambda: |-
              auto data_pretty = remote_transmission_request ? "n/a" : format_hex_pretty(x).c_str();
              if ((can_id & 0b11111000000000011111111000000) == 0b00000000000000000000001000000)
              {
                ESP_LOGD("comfoair_dump", "Node: %ld, PDO: %ld, rtr: %d, length: %d, content: %s (can_id: 0x%08lx)", can_id & 0x3f, can_id >> 14, remote_transmission_request, x.size(), data_pretty, can_id);
              }
              else
              {
                ESP_LOGV("comfoair_dump", "can_id: 0x%08lx, rtr: %d, length: %d, content: %s", can_id, remote_transmission_request, x.size(), data_pretty);
              }
      - can_id: 0b00000000000000000000001000000
        can_id_mask: 0b11111000000000011111111000000
        use_extended_id: true
        remote_transmission_request: false
        then:
          - lambda: |-
              auto pdo_id = id(comfoair)->get_pdo_id_from_can_id (can_id); // need space for ESPHome not to try to interpret it as id(...)
              switch (pdo_id)
              {
                  comfoair_on_frame_case( 16, id(comfoair), away_indicator_raw,                true);
                  comfoair_on_frame_case( 49, id(comfoair), operating_mode,                    true);
                  comfoair_on_frame_case( 54, id(comfoair), supply_fan_mode,                   true);
                  comfoair_on_frame_case( 55, id(comfoair), exhaust_fan_mode,                  true);
                  comfoair_on_frame_case( 65, id(comfoair), fan_level_raw,                     true);
                  comfoair_on_frame_case( 66, id(comfoair), bypass_activation_mode,            true);
                  comfoair_on_frame_case( 67, id(comfoair), temperature_profile,                true);
                  comfoair_on_frame_case( 81, id(comfoair), next_fan_change_in_raw,           false);
                  comfoair_on_frame_case( 82, id(comfoair), next_bypass_change_in_raw,        false);
                  comfoair_on_frame_case(117, id(comfoair), exhaust_fan_duty,                 false);
                  comfoair_on_frame_case(118, id(comfoair), supply_fan_duty,                  false);
                  comfoair_on_frame_case(119, id(comfoair), exhaust_fan_flow,                  false);
                  comfoair_on_frame_case(120, id(comfoair), supply_fan_flow,                   false);
                  comfoair_on_frame_case(121, id(comfoair), exhaust_fan_speed,                 true);
                  comfoair_on_frame_case(122, id(comfoair), supply_fan_speed,                  true);
                  comfoair_on_frame_case(128, id(comfoair), power,                             true);
                  comfoair_on_frame_case(129, id(comfoair), energy_ytd,                        true);
                  comfoair_on_frame_case(130, id(comfoair), energy_since_start,                true);
                  comfoair_on_frame_case(192, id(comfoair), filter_replacement_remaining_days, false);
                  comfoair_on_frame_case(209, id(comfoair), running_mean_outdoor_temp,        false);
                  comfoair_on_frame_case(210, id(comfoair), heating_season_raw,                true);
                  comfoair_on_frame_case(211, id(comfoair), cooling_season_raw,                true);
                  comfoair_on_frame_case(212, id(comfoair), profile_target_temp,               false);
                  comfoair_on_frame_case(213, id(comfoair), avoided_heating_actual,            true);
                  comfoair_on_frame_case(214, id(comfoair), avoided_heating_ytd,               true);
                  comfoair_on_frame_case(215, id(comfoair), avoided_heating_total,             true);
                  comfoair_on_frame_case(216, id(comfoair), avoided_cooling_actual,            true);
                  comfoair_on_frame_case(217, id(comfoair), avoided_cooling_ytd,               true);
                  comfoair_on_frame_case(218, id(comfoair), avoided_cooling_total,             true);
                  comfoair_on_frame_case(220, id(comfoair), pre_heater_temp_before,           false);
                  comfoair_on_frame_case(221, id(comfoair), post_heater_temp_after,           false);
                  comfoair_on_frame_case(225, id(comfoair), ventilation_mode,                  true);
                  comfoair_on_frame_case(227, id(comfoair), bypass_state,                      true);
                  comfoair_on_frame_case(274, id(comfoair), extract_air_temp,                 false);
                  comfoair_on_frame_case(275, id(comfoair), exhaust_air_temp,                 false);
                  comfoair_on_frame_case(276, id(comfoair), outdoor_air_temp,                 false);
                  comfoair_on_frame_case(277, id(comfoair), pre_heater_temp_after,            false);
                  comfoair_on_frame_case(278, id(comfoair), supply_air_temp,                  false);
                  comfoair_on_frame_case(290, id(comfoair), extract_air_humidity,              true);
                  comfoair_on_frame_case(291, id(comfoair), exhaust_air_humidity,              true);
                  comfoair_on_frame_case(292, id(comfoair), outdoor_air_humidity,              true);
                  comfoair_on_frame_case(293, id(comfoair), pre_heater_humidity_after,         true);
                  comfoair_on_frame_case(294, id(comfoair), supply_air_humidity,               true);
              }

climate:
  - platform: thermostat
    name: "Climate"
    id: comfoair_climate
    sensor: extract_air_temp
    icon: mdi:air-filter
    visual:
      min_temperature: 18
      max_temperature: 25
      temperature_step: 0.5
    min_heating_off_time: 1s
    min_heating_run_time: 1s
    min_cooling_off_time: 1s
    min_cooling_run_time: 1s
    min_idle_time: 1s
    cool_deadband: 0.1
    cool_overrun: 0.1
    heat_deadband: 0.1
    heat_overrun: 0.1
    default_preset: home
    preset:
      - name: comfort
        default_target_temperature_low: 23 °C
        default_target_temperature_high: 24 °C
      - name: home
        default_target_temperature_low: 22 °C
        default_target_temperature_high: 23 °C
      - name: sleep
        default_target_temperature_low: 21 °C
        default_target_temperature_high: 22 °C
    heat_action:
      - select.set:
          id: temperature_profile_select
          option: "Warm"
    idle_action:
      - select.set:
          id: temperature_profile_select
          option: "Normal"
    cool_action:
      - select.set:
          id: temperature_profile_select
          option: "Cool"

fan:
  - platform: speed
    name: "Fan"
    id: "comfoair_fan"
    icon: mdi:air-filter
    output: comfoair_fan_output
    speed_count: 3
    # restore_mode: RESTORE_DEFAULT_ON
    on_turn_on:
      - switch.turn_on: auto_ventilation
    on_turn_off:
      - select.set:
          id: fan_level_select
          option: "Away"
    on_speed_set:
      - if:
          condition:
            and:
              - fan.is_on: comfoair_fan
              - not:
                  lambda: return int(id(fan_level_raw).state) == id(comfoair_fan).speed;
          then:
            - select.set:
                id: fan_level_select
                option: !lambda |
                  if (id(comfoair_fan).speed == 0) {
                    return "Away";
                  } else if (id(comfoair_fan).speed == 1) {
                    return "Low";
                  } else if (id(comfoair_fan).speed == 2) {
                    return "Medium";
                  } else if (id(comfoair_fan).speed == 3) {
                    return "High";
                  } else {
                    return "Unknown";
                  }

.throttle-filter: &throttle-filter
  - throttle_average: "${filter_time}"
  - filter_out: nan
  - sliding_window_moving_average:
      {
        send_every: "${filter_send_every}",
        window_size: "${filter_window_size}",
      }

.throttle-filter-round-tens: &throttle-filter-round-tens
  - throttle_average: "${filter_time}"
  - filter_out: nan
  - sliding_window_moving_average:
      {
        send_every: "${filter_send_every}",
        window_size: "${filter_window_size}",
      }
  - lambda: return round(x/10)*10;

.throttle-filter-e-3: &throttle-filter-e-3
  - throttle_average: "${filter_time}"
  - filter_out: nan
  - sliding_window_moving_average:
      {
        send_every: "${filter_send_every}",
        window_size: "${filter_window_size}",
      }
  - multiply: 0.001

sensor:
  - platform: uptime
    name: "${entity_prefix} Uptime"
  - platform: wifi_signal
    name: "WiFi Signal Strength"
    update_interval: 60s

  - platform: template
    id: away_indicator_raw # PDO 16
    name: "away_indicator_raw"
    internal: true
    accuracy_decimals: 0
    on_value:
      then:
        - lambda: id(away_indicator).publish_state(x == 7);

  - platform: template
    id: fan_level_raw # PDO 65
    name: "fan_level_raw"
    internal: true
    accuracy_decimals: 0
    on_value:
      then:
        - lambda: id(fan_level).publish_state(std::to_string(int(x)));
        - if:
            condition:
              lambda: "return int(x) == 0;"
            then:
              - fan.turn_off: comfoair_fan
            else:
              - fan.turn_on:
                  id: comfoair_fan
                  speed: !lambda "return int(x);"

  - platform: template
    id: next_fan_change_in_raw # PDO 81
    name: "next_fan_change_in_raw"
    accuracy_decimals: 0
    device_class: duration
    unit_of_measurement: "s"
    internal: true
    filters:
      - throttle: 0.5s
    on_value:
      then:
        - lambda: id(next_fan_change_in).publish_state(id(comfoair)->seconds_to_human_readable(x));

  - platform: template
    id: next_bypass_change_in_raw # PDO 82
    name: "next_bypass_change_in_raw"
    accuracy_decimals: 0
    device_class: duration
    unit_of_measurement: "s"
    internal: true
    filters:
      - throttle: 0.5s
    on_value:
      then:
        - lambda: id(next_bypass_change_in).publish_state(id(comfoair)->seconds_to_human_readable(x));

  - platform: template
    id: exhaust_fan_duty # PDO 117
    name: "Exhaust Fan Duty"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    state_class: measurement
    filters: *throttle-filter

  - platform: template
    id: supply_fan_duty # PDO 118
    name: "Supply Fan Duty"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    state_class: measurement
    filters: *throttle-filter

  - platform: template
    id: supply_fan_flow # PDO 119
    name: "Supply Fan Flow"
    icon: mdi:gauge
    accuracy_decimals: 0
    unit_of_measurement: "m³/h"
    state_class: measurement
    filters: *throttle-filter

  - platform: template
    id: exhaust_fan_flow # PDO 120
    name: "Exhaust Fan Flow"
    icon: mdi:gauge
    accuracy_decimals: 0
    unit_of_measurement: "m³/h"
    state_class: measurement
    filters: *throttle-filter

  - platform: template
    id: exhaust_fan_speed # PDO 121
    name: "Exhaust Fan Speed"
    icon: mdi:speedometer
    accuracy_decimals: 0
    unit_of_measurement: "rpm"
    state_class: measurement
    filters: *throttle-filter-round-tens

  - platform: template
    id: supply_fan_speed # PDO 122
    name: "Supply Fan Speed"
    icon: mdi:speedometer
    accuracy_decimals: 0
    unit_of_measurement: "rpm"
    state_class: measurement
    filters: *throttle-filter-round-tens

  - platform: template
    id: power # PDO 128
    name: "Power"
    accuracy_decimals: 0
    unit_of_measurement: "W"
    device_class: power
    state_class: measurement
    filters: *throttle-filter

  - platform: template
    id: energy_ytd # PDO 129
    name: "Energy YTD"
    accuracy_decimals: 0
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing

  - platform: template
    id: energy_since_start # PDO 130
    name: "Energy Since Start"
    accuracy_decimals: 0
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing

  - platform: template
    id: filter_replacement_remaining_days # PDO 192
    name: "Filter Replacement Remaining Days"
    icon: mdi:air-filter
    accuracy_decimals: 0
    unit_of_measurement: "days"

  - platform: template
    id: running_mean_outdoor_temp # PDO 209
    name: "Running Mean Outdoor Temperature"
    filters: [multiply: 0.1]
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement

  - platform: template
    id: heating_season_raw # PDO 210
    accuracy_decimals: 0
    on_value:
      then:
        - lambda: id(heating_season).publish_state(x == 1);

  - platform: template
    id: cooling_season_raw # PDO 211
    accuracy_decimals: 0
    on_value:
      then:
        - lambda: id(cooling_season).publish_state(x == 1);

  - platform: template
    id: profile_target_temp # PDO 212
    name: "Profile Target Temperature"
    filters: [multiply: 0.1]
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement

  - platform: template
    id: avoided_heating_actual # PDO 213
    name: "Avoided Heating Actual"
    filters: *throttle-filter-e-3
    accuracy_decimals: 3
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement

  - platform: template
    id: avoided_heating_ytd # PDO 214
    name: "Avoided Heating YTD"
    accuracy_decimals: 0
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing

  - platform: template
    id: avoided_heating_total # PDO 215
    name: "Avoided Heating Total"
    accuracy_decimals: 0
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing

  - platform: template
    id: avoided_cooling_actual # PDO 216
    name: "Avoided Cooling Actual"
    filters: *throttle-filter-e-3
    accuracy_decimals: 3
    unit_of_measurement: "kW"
    device_class: power
    state_class: measurement

  - platform: template
    id: avoided_cooling_ytd # PDO 217
    name: "Avoided Cooling YTD"
    accuracy_decimals: 0
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing

  - platform: template
    id: avoided_cooling_total # PDO 218
    name: "Avoided Cooling Total"
    accuracy_decimals: 0
    unit_of_measurement: "kWh"
    device_class: energy
    state_class: total_increasing

  - platform: template
    id: pre_heater_temp_before # PDO 220
    name: "Pre-heater Temperature Before"
    filters: [multiply: 0.1]
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement

  - platform: template
    id: post_heater_temp_after # PDO 221
    name: "Post-heater Temperature After"
    filters: [multiply: 0.1]
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement

  - platform: template
    id: bypass_state # PDO 227
    name: "Bypass State"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    state_class: measurement

  - platform: template
    id: extract_air_temp # PDO 274
    name: "Extract Air Temperature"
    filters: [multiply: 0.1]
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement

  - platform: template
    id: exhaust_air_temp # PDO 275
    name: "Exhaust Air Temperature"
    filters: [multiply: 0.1]
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement

  - platform: template
    id: outdoor_air_temp # PDO 276
    name: "Outdoor Air Temperature"
    filters: [multiply: 0.1]
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement

  - platform: template
    id: pre_heater_temp_after # PDO 277, after ComfoFond/GHE
    name: "Pre-heater Temp After"
    filters: [multiply: 0.1]
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement

  - platform: template
    id: supply_air_temp # PDO 278
    name: "Supply Air Temperature"
    filters: [multiply: 0.1]
    accuracy_decimals: 1
    unit_of_measurement: "°C"
    device_class: temperature
    state_class: measurement

  - platform: template
    id: extract_air_humidity # PDO 290
    name: "Extract Air Humidity"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: humidity
    state_class: measurement

  - platform: template
    id: exhaust_air_humidity # PDO 291
    name: "Exhaust Air Humidity"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: humidity
    state_class: measurement

  - platform: template
    id: outdoor_air_humidity # PDO 292, is this really still correct with ComfoFond/GHE installed?
    name: "Outdoor Air Humidity"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: humidity
    state_class: measurement

  - platform: template
    id: pre_heater_humidity_after # PDO 293
    name: "Pre-heater Humidity After"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: humidity
    state_class: measurement

  - platform: template
    id: supply_air_humidity # PDO 294
    name: "Supply Air Humidity"
    accuracy_decimals: 0
    unit_of_measurement: "%"
    device_class: humidity
    state_class: measurement

text_sensor:
  - platform: version
    name: "ESPHome Version"
    hide_timestamp: true

  - platform: template
    id: fan_level # PDO 65 (raw)
    name: "Fan Level"
    icon: mdi:fan
    filters:
      - map:
          - 0 -> Away
          - 1 -> Low
          - 2 -> Medium
          - 3 -> High
    on_value:
      then:
        - lambda: id(fan_level_select).publish_state(x);

  - platform: template
    id: operating_mode # PDO 49
    name: "Operating Mode"
    filters:
      - map:
          - 1 -> Manual (limited)
          - 2 -> PRESETRF
          - 3 -> PRESETANALOG
          - 4 -> PRESETRFANALOG
          - 5 -> Manual (permanent)
          - 6 -> Boost
          - 7 -> Boost (RF)
          - 8 -> Bathroom Switch
          - 11 -> Away
          - 255 -> Auto
    on_value:
      then:
        - if:
            condition:
              lambda: 'return x == "Auto";'
            then:
              - switch.template.publish:
                  id: auto_ventilation
                  state: ON
            else:
              - switch.template.publish:
                  id: auto_ventilation
                  state: OFF

  - platform: template
    id: supply_fan_mode # PDO 54
    name: "Supply Fan Mode"
    icon: mdi:home-import-outline
    filters:
      - map:
          - 1 -> Supply Only
          - 255 -> Balanced
    on_value:
      if:
        condition:
          lambda: 'return x == "Supply Only";'
        then:
          - lambda: id(balance_mode).publish_state(x);
        else:
          if:
            condition:
              lambda: 'return id(exhaust_fan_mode).state == "Balanced";'
            then:
              - lambda: id(balance_mode).publish_state(x);

  - platform: template
    id: exhaust_fan_mode # PDO 55
    name: "Exhaust Fan Mode"
    icon: mdi:home-export-outline
    filters:
      - map:
          - 1 -> Exhaust Only
          - 255 -> Balanced
    on_value:
      if:
        condition:
          lambda: 'return x == "Exhaust Only";'
        then:
          - lambda: id(balance_mode).publish_state(x);
        else:
          if:
            condition:
              lambda: 'return id(supply_fan_mode).state == "Balanced";'
            then:
              - lambda: id(balance_mode).publish_state(x);

  - platform: template
    id: balance_mode # PDO 55
    name: "Balance Mode"
    icon: mdi:arrow-split-vertical
    on_value:
      then:
        - lambda: id(balance_mode_select).publish_state(x);

  - platform: template
    id: bypass_activation_mode # PDO 66
    name: "Bypass Activation Mode"
    filters:
      - map:
          - 0 -> Auto
          - 1 -> Activated
          - 2 -> Deactivated

  - platform: template
    id: temperature_profile # PDO 67
    name: "Temperature Profile"
    filters:
      - map:
          - 0 -> Normal
          - 1 -> Cool
          - 2 -> Warm
    on_value:
      then:
        - lambda: id(temperature_profile_select).publish_state(x);

  - platform: template
    id: next_fan_change_in # PDO 81 (raw)
    name: "Next Fan Change In"

  - platform: template
    id: next_bypass_change_in # PDO 81 (raw)
    name: "Next Bypass Change In"

  - platform: template
    id: ventilation_mode # PDO 225
    name: "Ventilation Mode"
    filters:
      - map:
          - 0 -> Disabled
          - 1 -> Active
          - 2 -> Overruling

binary_sensor:
  - platform: template
    id: away_indicator # PDO 16 (raw)
    name: "Away Indicator"
    icon: mdi:airplane
    on_press:
      then:
        - switch.template.publish:
            id: away_mode
            state: ON
    on_release:
      then:
        - switch.template.publish:
            id: away_mode
            state: OFF

  - platform: template
    id: heating_season # PDO 210 (raw)
    name: "Heating Season"
    icon: mdi:snowflake-thermometer

  - platform: template
    id: cooling_season # PDO 211 (raw)
    name: "Cooling Season"
    icon: mdi:sun-thermometer

button:
  - platform: template
    name: "Boost (15 min)"
    icon: mdi:fast-forward-15
    on_press:
      - lambda: id(comfoair)->set_boost(15 * 60);

  - platform: template
    name: "Boost (60 min)"
    icon: mdi:fast-forward-60
    on_press:
      - lambda: id(comfoair)->set_boost(60 * 60);

  - platform: template
    name: "Boost (3h)"
    icon: mdi:numeric-3-circle
    on_press:
      - lambda: id(comfoair)->set_boost(3 * 60 * 60);

  - platform: template
    name: "Boost (12h)"
    icon: mdi:dice-d12
    on_press:
      - lambda: id(comfoair)->set_boost(12 * 60 * 60);

  - platform: template
    name: "Boost off"
    icon: mdi:stop
    on_press:
      - lambda: id(comfoair)->set_boost(0);

  - platform: template
    name: "Bypass On (1h)"
    icon: mdi:fan-chevron-up
    on_press:
      - lambda: id(comfoair)->set_bypass_mode(comfoair_q::BYPASS_ACTIVATE, 60 * 60);

  - platform: template
    name: "Bypass On (12h)"
    icon: mdi:dice-d12
    on_press:
      - lambda: id(comfoair)->set_bypass_mode(comfoair_q::BYPASS_ACTIVATE, 12 * 60 * 60);

  - platform: template
    name: "Bypass Auto"
    icon: mdi:fan-auto
    on_press:
      - lambda: id(comfoair)->set_bypass_mode(comfoair_q::BYPASS_AUTO, 0);

  - platform: template
    name: "Bypass Off (1h)"
    icon: mdi:fan-chevron-down
    on_press:
      - lambda: id(comfoair)->set_bypass_mode(comfoair_q::BYPASS_DEACTIVATE, 60 * 60);

switch:
  - platform: factory_reset
    name: Restart with Factory Default Settings

  - platform: template
    name: "Auto Ventilation"
    id: auto_ventilation
    icon: mdi:toggle-switch
    turn_on_action:
      # if boost is on, turn it off first
      - if:
          condition:
            or:
              - text_sensor.state:
                  id: operating_mode
                  state: "Boost"
              - text_sensor.state:
                  id: operating_mode
                  state: "Boost (RF)"
          then:
            - lambda: id(comfoair)->set_boost(0);
            - delay: 1s
      # hack: if current mode is manual (limited), switch to manual (permanent) first
      - if:
          condition:
            text_sensor.state:
              id: operating_mode
              state: "Manual (limited)"
          then:
            - lambda: id(comfoair)->set_manual_mode(true);
            - delay: 1s
      - lambda: id(comfoair)->set_manual_mode(false);
      - delay: 1s
      # edge case: if after turning on boost, a custom fan level is set, the operating mode will be 'Manual (limited)'
      # if you try ot enable Auto Ventilation, it will switch to 'Manual (permanent)' first, then turn on boost mode again
      # So, do this after manual limited, otherwise it will go manual limited -> manual permanent -> boost
      - if:
          condition:
            or:
              - text_sensor.state:
                  id: operating_mode
                  state: "Boost"
              - text_sensor.state:
                  id: operating_mode
                  state: "Boost (RF)"
          then:
            - lambda: id(comfoair)->set_boost(0);
            - delay: 1s
    turn_off_action:
      - lambda: id(comfoair)->set_manual_mode(true);
  - platform: template
    name: "Away Mode"
    id: away_mode
    icon: mdi:airplane
    turn_on_action:
      - lambda: id(comfoair)->set_away(true);
      - delay: 1s
    turn_off_action:
      - lambda: id(comfoair)->set_away(false);
      - delay: 1s

select:
  - platform: template
    name: "Fan Speed"
    id: fan_level_select
    icon: mdi:fan
    options:
      - Away
      - Low
      - Medium
      - High
    set_action:
      - if:
          condition:
            not:
              text_sensor.state:
                id: fan_level
                state: !lambda "return x;"
          then:
            - lambda: |
                if (x == "Away") {
                  id(comfoair)->set_ventilation_level(comfoair_q::VENTILATION_LEVEL_AWAY);
                } else if (x == "Low") {
                  id(comfoair)->set_ventilation_level(comfoair_q::VENTILATION_LEVEL_LOW);
                } else if (x == "Medium") {
                  id(comfoair)->set_ventilation_level(comfoair_q::VENTILATION_LEVEL_MEDIUM);
                } else if (x == "High") {
                  id(comfoair)->set_ventilation_level(comfoair_q::VENTILATION_LEVEL_HIGH);
                }

  - platform: template
    name: "Temperature Profile"
    id: temperature_profile_select
    icon: mdi:thermometer
    options:
      - "Normal"
      - "Cool"
      - "Warm"
    set_action:
      - if:
          condition:
            not:
              text_sensor.state:
                id: temperature_profile
                state: !lambda "return x;"
          then:
            - lambda: |
                if (x == "Normal") {
                  id(comfoair)->set_temp_profile(comfoair_q::TEMP_PROFILE_NORMAL);
                } else if (x == "Cool") {
                  id(comfoair)->set_temp_profile(comfoair_q::TEMP_PROFILE_COOL);
                } else if (x == "Warm") {
                  id(comfoair)->set_temp_profile(comfoair_q::TEMP_PROFILE_WARM);
                }

  - platform: template
    name: "Temperature Passive"
    id: temperature_passive_select
    icon: mdi:thermometer-minus
    options:
      - "On"
      - "Auto only"
      - "Off"
    optimistic: true
    restore_value: true
    set_action:
      # map options to enum
      - lambda: |
          if (x == "Off") {
            id(comfoair)->set_temperature_passive(comfoair_q::OAO_OFF);
          } else if (x == "Auto only") {
            id(comfoair)->set_temperature_passive(comfoair_q::OAO_AUTO);
          } else if (x == "On") {
            id(comfoair)->set_temperature_passive(comfoair_q::OAO_ON);
          }

  - platform: template
    name: "Humidity Comfort"
    id: humidity_comfort_select
    icon: mdi:water-percent
    options:
      - "On"
      - "Auto only"
      - "Off"
    optimistic: true
    restore_value: true
    set_action:
      - lambda: |
          if (x == "Off") {
            id(comfoair)->set_humidity_comfort(comfoair_q::OAO_OFF);
          } else if (x == "Auto only") {
            id(comfoair)->set_humidity_comfort(comfoair_q::OAO_AUTO);
          } else if (x == "On") {
            id(comfoair)->set_humidity_comfort(comfoair_q::OAO_ON);
          }

  - platform: template
    name: "Humidity Protection"
    id: humidity_protection_select
    icon: mdi:water-percent
    options:
      - "On"
      - "Auto only"
      - "Off"
    optimistic: true
    restore_value: true
    set_action:
      - lambda: |
          if (x == "Off") {
            id(comfoair)->set_humidity_protection(comfoair_q::OAO_OFF);
          } else if (x == "Auto only") {
            id(comfoair)->set_humidity_protection(comfoair_q::OAO_AUTO);
          } else if (x == "On") {
            id(comfoair)->set_humidity_protection(comfoair_q::OAO_ON);
          }
  - platform: template
    name: "Balance mode"
    id: balance_mode_select
    icon: mdi:arrow-split-vertical
    options:
      - "Balanced"
      - "Supply Only"
      - "Exhaust Only"
    optimistic: true
    restore_value: true
    set_action:
      - lambda: |
          if (x == "Balanced") {
            id(comfoair)->set_balance_mode(comfoair_q::BALANCE_MODE_BALANCED);
          } else if (x == "Supply Only") {
            id(comfoair)->set_balance_mode(comfoair_q::BALANCE_MODE_SUPPLY_ONLY);
          } else if (x == "Exhaust Only") {
            id(comfoair)->set_balance_mode(comfoair_q::BALANCE_MODE_EXHAUST_ONLY);
          }

# See docs: https://github.com/michaelarnauts/aiocomfoconnect/blob/master/docs/PROTOCOL-PDO.md
comfoair_q:
  id: comfoair
  request_ids:
    [
      16,
      49,
      54,
      55,
      65,
      66,
      67,
      81,
      82,
      117,
      118,
      119,
      120,
      121,
      122,
      128,
      129,
      130,
      192,
      209,
      210,
      211,
      212,
      212,
      213,
      214,
      215,
      216,
      217,
      218,
      220,
      221,
      225,
      227,
      274,
      275,
      276,
      277,
      278,
      290,
      291,
      292,
      293,
      294,
    ]
